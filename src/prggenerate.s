; Assemnbly for output of TEDSE2PRG generator

	; System addressesr
	TED_RAMSELECT       	= $FF12     ; TED data fetch ROM/RAM select (on bit 2)
	TED_CHARBASE        	= $FF13     ; TED Character data base address (ob bit 2-7)
	TED_BGCOLOR				= $FF15		; TED background color and luminance register
	TED_BORDERCOLOR			= $FF19		; TED border color and luminance register
	CINT					= $FF81		; CINT kernal call for initialize screen editor
    GETIN                   = $FFE4     ; GETIN kernal call for reading keyboard buffer

    ; Zero page addresses
	ZP1						= $D8
	ZP2						= $D9
	ZP3						= $DA
	ZP4						= $DB

    ; Segment to store code in
    .segment    "PRGGEN"

    ; Load address
    .word $1001

    ; BASIC header:
	; 10 SYS7302
	.byte $0b,$10,$0a,$00,$9e
	.byte "4224"
	.byte $00,$30,$10
	
	; 20 REM generated by vdc screen editor
	.byte $14,$00,$8f,$20
	.byte "generated by vdc screen editor"
	.byte $00,$55,$10
	
	;30 REM version
	.byte $1e,$00,$8f,$20
	.byte "version 0123456789012345678901"
	.byte $00,$79,$10
	
	;40 REM written in 2022 by xander mol
	.byte $28,$00,$8f,$20
	.byte "written in 2022 by xander mol"
	.byte $00,$00,$00

    ; Variables
bgcolor:
    .res 1                              ; $107B: background color
bordercolor:
    .res 1                              ; $107C: border color
charsetaddress:
    .res 2                              ; $107D: custom charset address (0=none)
pages:
	.res 1								; $107F: Pages to copy

	; Set background color
    lda bgcolor							; Load color value
    sta TED_BGCOLOR						; Store in TED rgeister for background color and luminance

	; Set border color
	lda bordercolor						; Load color value
	sta TED_BORDERCOLOR					; Store in TED rgeister for border color and luminance

    ; Redefine standard charset if address is set
    lda charsetaddress+1	            ; Load high byte of charset address variable
    cmp #$00                            ; Compare to zero to see if address is set
	beq copyscreen			            ; Branch if it equals to zero=no redefine needed
	lda charsetaddress					; Load low byte of charset address
	sta ZP1								; Store in ZP pointer
	lda charsetaddress+1				; Load high byte of charset address
	sta ZP2								; Store in ZP pointer
	lda #$00							; Load 0 for detination address low byte
	sta ZP3								; Store in ZP pointer
	lda #$30							; Load $30 for detination address high byte
	sta ZP4								; Store in ZP pointer
	lda #$04							; Load 8 for 8 pages to copy
	sta pages							; Store in counter variable
	jsr memcopy							; Copy memory
	lda TED_CHARBASE					; Load present value of TED Chararcter base address register
	and #$03							; Perform logical AND with $03 to clear address bits
	ora #$30							; Perform logical OR with $30 as high byte to set address bits
	sta TED_CHARBASE					; Store in TED register again
	lda TED_RAMSELECT					; Load present value of TED RAM select register
	and #$FB							; Perform logical AND with $FB to clear bit 2 to look at RAM for charset
	sta TED_RAMSELECT					; Store in TED register again

	; Copy screen to visual screen memory area
copyscreen:
	lda <screendata						; Obtain low byte of screen data address
	sta ZP1								; Store in ZP pointer
	lda >screendata						; Obtain high byte of screen data address
	sta ZP2								; Store in ZP pointer
	lda #$00							; Load 0 for color memory low byte
	sta ZP3								; Store in ZP pointer
	lda #$08							; Load 8 for color memory high byte
	sta ZP4								; Store in ZP pointer
	lda #$08							; Load 8 for 8 pages to copy
	sta pages							; Store in counter variable
	jsr memcopy							; Copy memory

    ; Wait for key
waitkey:
    jsr GETIN
    beq waitkey

	; Reset charsets
	lda charsetaddress		            ; Load high byte of charset address variable
    cmp #$00                            ; Compare to zero to see if address is set
    beq clearscreen			            ; Branch if it equals to zero=no redefine needed
	lda TED_CHARBASE					; Load present value of TED Chararcter base address register
	and #$03							; Perform logical AND with $03 to clear address bits
	ora #$D0							; Perform logical OR with $D0 to set ROM high byte for uppercase ROM charset
	sta TED_CHARBASE					; Store in TED register again
	lda TED_RAMSELECT					; Load present value of TED RAM select register
	ora #$04							; Perform logical OR with $04 to set bit 2 to look at ROM for charset
	sta TED_RAMSELECT					; Store in TED register again

clearscreen:
	; Clear screens
	jsr CINT							; Call CINT kernal routine for clearing screens

    ; return to BASIC
	rts

	; Copy memory from source in ZP1/ZP2 pointer to destination in ZP3/ZP4 pointer
	; Number of pages to copy in pages variable
memcopy:
	ldy #$FF							; Set Y counter at 256 bytes
	lda (ZP1),y							; Load value at source
	sta (ZP3),Y							; Store value at destination
	dey									; Decrease Y counter
	cpy #$FF							; Compare to see if counter did pass zero
	bne memcopy							; Continue loop if not passed zero
	inc ZP2								; Increase source high byte
	inc ZP4								; Increase destination high byte
	dec pages							; Decrease page counter
	bne memcopy							; Loop until zero is reached
	rts

screendata:
	.byte $00,$00,$00,$00

